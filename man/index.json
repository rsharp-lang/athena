{".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"3","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"},"handleHttpGet":{"author":null,"declares":{"name":"handleHttpGet","parameters":[{"name":"req","text":null},{"name":"response","text":null}],"sourceMap":{"File":"get.R","Line":"12","Method":{"Method":"handleHttpGet","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Processes incoming HTTP GET requests, serving static files or executing R context scripts.","details":"1. Follows similar debug and routing logic as \\code{handleHttpPost}.\\cr 2. Additional static file handling: Serves files from `wwwroot` via \\code{host_file()} if path exists.\\cr 3. Only executes R script via \\code{exec_r()} when no static file matches.","examples":null,"keywords":[],"parameters":[],"returns":"Modifies `response` object in-place. No explicit return value.","see_also":null,"title":"@title Handle HTTP GET Request"},"run_http":{"author":null,"declares":{"name":"run_http","parameters":[{"name":"httpPort","text":"'80'"},{"name":"webContext","text":"'.\/wwwroot'"}],"sourceMap":{"File":"http.R","Line":"22","Method":{"Method":"run_http","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Initializes HTTP server with specified port and web context directory, registers request handlers for different HTTP methods.","details":"1. Sets global configurations:\\cr - \\code{wwwroot}: File system handler for static content\\cr - \\code{deepseek}: Initialized Ollama AI context\\cr - \\code{apps}: URL routing rules from \\code{scan_urls()}\\cr 2. Attaches custom HTTP headers (X-Powered-By, Author, etc.)\\cr 3. Registers handlers for GET\/POST\/PUT methods\\cr 4. PUT method returns a test success message by default","examples":null,"keywords":[],"parameters":[{"name":"httpPort","text":"(character\/numeric) Port to listen on. Default: \"80\"."},{"name":"webContext","text":"(character) Path to web root directory. Default: \".\/wwwroot\"."}],"returns":"Returns the HTTP socket object. Use \\code{listen()} to start server.","see_also":null,"title":"@title Configure and Start HTTP Server"},".athena_ui":{"author":null,"declares":{"name":".athena_ui","parameters":[],"sourceMap":{"File":"http.R","Line":"50","Method":{"Method":".athena_ui","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Internal function to resolve the file path of Athena's web interface.","details":"","examples":null,"keywords":["internal"],"parameters":[],"returns":"(character) Full path to the package's web resources directory.","see_also":null,"title":"@title Get Athena UI Path"},"handleHttpPost":{"author":null,"declares":{"name":"handleHttpPost","parameters":[{"name":"req","text":null},{"name":"response","text":null}],"sourceMap":{"File":"post.R","Line":"14","Method":{"Method":"handleHttpPost","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Processes incoming HTTP POST requests, routes to appropriate handler or executes R context script.","details":"1. Retrieves global configurations for web root directory (`wwwroot`) and registered apps (`apps`).\\cr 2. When `verbose=TRUE`, prints debug information including raw HTTP headers.\\cr 3. Routes request to app-specific handler if URL matches registered apps via \\code{check_url()}.\\cr 4. Falls back to executing R context script in `wwwroot` via \\code{exec_r()} if no app matches.","examples":null,"keywords":[],"parameters":[{"name":"req","text":"An HTTP request object containing client data and headers."},{"name":"response","text":"An HTTP response object for building server output."}],"returns":"Modifies `response` object in-place. No explicit return value.","see_also":null,"title":"@title Handle HTTP POST Request"},"download_file_proxy":{"author":null,"declares":{"name":"download_file_proxy","parameters":[{"name":"key","text":null}],"sourceMap":{"File":"proxy.R","Line":"36","Method":{"Method":"download_file_proxy","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Retrieves and downloads a file from proxy storage based on hash key lookup. This function handles both file retrieval and HTTP response generation.","details":"","examples":null,"keywords":[],"parameters":[{"name":"key","text":"A 32-character hash string associated with the target file. Hash format should follow \"XX...XX\" pattern (e.g. \"a1b2c3...z9\")."}],"returns":"* When file exists: Returns file metadata through `file.info()` * When file not found: Returns HTTP 404 response list containing: - code: HTTP status code - info: Error message string","see_also":null,"title":"Download file by hash key"},"proxy_realpath":{"author":null,"declares":{"name":"proxy_realpath","parameters":[{"name":"key","text":null}],"sourceMap":{"File":"proxy.R","Line":"69","Method":{"Method":"proxy_realpath","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Constructs physical file path using hash key segmentation strategy. Files are stored in nested directories derived from hash segments to avoid filesystem overload in high-concurrency environments.","details":"","examples":null,"keywords":["internal"],"parameters":[{"name":"key","text":"A 32-character hash string generated by proxy storage system. Must contain at least 25 characters for valid path resolution."}],"returns":"Character string representing full file path following structure: `<tempdir>\/<3-5_char_substr>\/<23-25_char_substr>\/<key>` Returns empty string if no matching file found.","see_also":null,"title":"Resolve file storage path"},"init_ollama":{"author":null,"declares":{"name":"init_ollama","parameters":[],"sourceMap":{"File":"ollama.R","Line":"19","Method":{"Method":"init_ollama","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Initializes and configures the Ollama AI client using global options. This function sets up the model and server connection, builds required tools, and returns the initialized client object for subsequent AI operations.","details":"Uses `ollama_model` and `ollama_server` options from global environment to configure the client. Automatically attaches essential tools via `build_ollama_tools()` during initialization.","examples":null,"keywords":[],"parameters":[],"returns":"Returns an initialized Ollama client object that's ready for AI operations. The returned object contains configured tools and settings.","see_also":null,"title":"@title Initialize Ollama AI Client"},"ollama_talk":{"author":null,"declares":{"name":"ollama_talk","parameters":[{"name":"msg","text":null}],"sourceMap":{"File":"ollama_talk.R","Line":"7","Method":{"Method":"ollama_talk","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[{"name":"msg","text":"user message that post to this server"}],"returns":null,"see_also":null,"title":"url handler for the LLMs Ai talk"},"build_ollama_tools":{"author":null,"declares":{"name":"build_ollama_tools","parameters":[{"name":"deepseek","text":"NULL"}],"sourceMap":{"File":"ollama_tools.R","Line":"60","Method":{"Method":"build_ollama_tools","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Scans the R environment to dynamically construct and attach AI tools to the Ollama client. Handles both system-defined tools and custom functions with Ollama-specific attributes. System tools take precedence to prevent naming conflicts with user-defined tools.","details":"The toolset construction process includes two phases: \\enumerate{ \\item System Tool Injection - Adds a mandatory `sys_info` tool containing: \\itemize{ \\item System name and introduction text \\item Developer information \\item Programming language details \\item GitHub repository URL \\item License information } \\item Environment Scanning - Detects functions with \\code{@ollama} attributes: \\itemize{ \\item Requires \\code{roxygen2}-style documentation for parameters and descriptions \\item Extracts argument specifications from \\code{@param} tags \\item Identifies required parameters through documentation analysis } }","examples":null,"keywords":[],"parameters":[{"name":"deepseek","text":"An Ollama client object to attach tools to. When NULL (default), uses the currently active client. Note that relying on implicit client selection is discouraged in production environments."}],"returns":"Invisibly returns the modified Ollama client object with attached tools.","see_also":null,"title":"@title Build Ollama AI Toolset"},"read_text":{"author":null,"declares":{"name":"read_text","parameters":[{"name":"file","text":null}],"sourceMap":{"File":"utils.R","Line":"11","Method":{"Method":"read_text","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"read the given file as plain text file, this function returns the plain text data of the input file","examples":null,"keywords":[],"parameters":[{"name":"file","text":"the file path of the target text file for read by this function"}],"returns":null,"see_also":null,"title":"read text file"},"set_proxy":{"author":null,"declares":{"name":"set_proxy","parameters":[{"name":"file","text":null}],"sourceMap":{"File":"utils.R","Line":"25","Method":{"Method":"set_proxy","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"convert the local file path as url link on the cdn proxy server, this function returns file url on the cdn server. you should generates a html anchor link html element to make this file download available to the user.","examples":null,"keywords":[],"parameters":[{"name":"file","text":"the target file path for make convert to download url"}],"returns":null,"see_also":null,"title":"create file proxy"},"image_url":{"author":null,"declares":{"name":"image_url","parameters":[{"name":"img.file","text":null}],"sourceMap":{"File":"utils.R","Line":"42","Method":{"Method":"image_url","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"convert the local image file path as the url could be used as the src attribute value of the html img tag. images format supports svg\/png\/bmp\/jpg\/jpeg\/webp\/gif.","examples":null,"keywords":[],"parameters":[{"name":"img_file","text":"the target image file path ffor make convert to http url"}],"returns":null,"see_also":null,"title":"creaate image url"},"file_proxy":{"author":null,"declares":{"name":"file_proxy","parameters":[{"name":"file","text":null}],"sourceMap":{"File":"utils.R","Line":"96","Method":{"Method":"file_proxy","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function performs three key operations: \\enumerate{ \\item Generates MD5 hash based on file path and current timestamp \\item Creates nested temporary directory using hash fragments (e.g., \/temp\/a1b2c\/d4e5f) \\item Copies original file to hashed location while preserving extension }","examples":null,"keywords":[],"parameters":[{"name":"file","text":"A character string specifying the path to an existing local file. The file must exist and be accessible (will trigger error if not found)."}],"returns":"A named list containing download metadata with two elements: \\describe{ \\item{href}{Character string containing the URL path for file download, formatted as `\/get\/file?key=<md5_hash>`} \\item{filename}{Character string preserving the original filename with extension} }","see_also":null,"title":"Generate a proxied download link for local files This function creates a temporary proxy link for accessing local files through a web interface. It copies the input file to a temporary directory with an MD5-hashed path and returns a structured download link."},"router":{"author":null,"declares":{"name":"router","parameters":[{"name":"url","text":null},{"name":"webContext","text":null}],"sourceMap":{"File":"file_url.R","Line":"14","Method":{"Method":"router","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Handles URL routing for web requests, mapping URLs to local R scripts or static files in the web context directory.","details":"Routing logic:\\cr - Root path (\/) maps to index.html\\cr - URLs ending with .R get direct script mapping\\cr - Other URLs resolve to static files\\cr Ensures proper extension handling for R script execution.","examples":null,"keywords":[],"parameters":[{"name":"url","text":"Parsed URL object from incoming request (should contain $path)"},{"name":"webContext","text":"Base directory path for web resources"}],"returns":"Returns full filesystem path to either:\\cr - Corresponding R script (appends .R if missing)\\cr - Static file (defaults to index.html for root path)\\cr","see_also":null,"title":"@title Route URLs to Local Resources"},"exec_r":{"author":null,"declares":{"name":"exec_r","parameters":[{"name":"webContext","text":null},{"name":"req","text":null},{"name":"response","text":null}],"sourceMap":{"File":"rscript.R","Line":"17","Method":{"Method":"exec_r","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Executes R scripts identified by the router and returns generated content through HTTP response.","details":"Operation flow:\\cr 1. Resolve URL to local file path via router()\\cr 2. If file exists, execute with source() and stream output\\cr 3. Handle missing files with 404 error including normalized path\\cr Ensures proper error handling and path disclosure prevention.","examples":null,"keywords":[],"parameters":[{"name":"webContext","text":"Base directory containing web resources"},{"name":"req","text":"HTTP request object containing URL information"},{"name":"response","text":"HTTP response object to write output to"}],"returns":"Writes execution results to response object or returns HTTP error","see_also":null,"title":"@title Execute Routed R Script"}}