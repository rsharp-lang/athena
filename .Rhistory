install.packages("glmnet")
install.packages("e1071")
install.packages("caret")
install.packages("tidyverse")
install.packages("doParallel")
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(glmnet, # LASSO回归
randomForest, # 随机森林
e1071, # SVM基础包
caret, # 机器学习工具集
pROC, # ROC分析
tidyverse, # 数据处理
doParallel      # 并行计算加速
)
source("G:/athena/scripts/biomarkers.R")
file_path = "F:\\datapool\\20250523\\factors.xlsx"
require(xlsx)
install.packages("xlsx")
require(xlsx)
read.xlsx
data = read.xlsx(file_pth, sheetName = "矩阵", row.names = 1, check.names = FALSE)
data = read.xlsx(file_path, sheetName = "矩阵", row.names = 1, check.names = FALSE)
data
read.csv
preprocessed <- preprocess_data(data)
data = read.xlsx(file_path, sheetName = "矩阵", row.names = NULL, check.names = FALSE)
data
preprocessed <- preprocess_data(data)
source("G:/athena/scripts/biomarkers.R")
preprocessed <- preprocess_data(data)
preprocessed
X <- preprocessed$X
y <- preprocessed$y
lasso_result <- run_lasso(X, y)
source("G:/athena/scripts/biomarkers.R")
preprocessed <- preprocess_data(data)
X <- preprocessed$X
y <- preprocessed$y
x
X
Y
lasso_result <- run_lasso(X, y)
y
data
class_filter = c("正常妊娠孕妇","复发性流产");
preprocessed <- preprocess_data(data[data$class %in% class_filter,]);
preprocessed
X <- preprocessed$X
y <- preprocessed$y
lasso_result <- run_lasso(X, y)
lasso_result
rf_result <- run_random_forest(X, y)
rf-
r
rf_result
svm_result <- run_svm_rfe(X, y)
svm_result
ensemble_result <- ensemble_model(X, y,
intersect(lasso_result$features, rf_result$features, svm_result$features))
lasso_result$features
rf_result$features
svm_result$features
intersect
intersect( intersect(lasso_result$features, rf_result$features), svm_result$features)
n_features = 5
ctrl <- rfeControl(functions = caretFuncs, method = "cv", number = 10)
ctrl
rfe_results <- rfe(X, y,
sizes = 1:n_features,
rfeControl = ctrl,
method = "svmRadial",
metric = "Accuracy"
)
rfe_results
metric = "Accuracy"
# 设置特征筛选控制参数
ctrl <- rfeControl(
functions = caretFuncs,
method = "cv",
number = 10,
verbose = FALSE,
returnResamp = "all"
)
# 定义特征筛选过程
rfe_results <- rfe(
X, y,
sizes = 1:n_features,
rfeControl = ctrl,
method = "svmRadial",
metric = metric,
tuneLength = 5,
preProcess = c("center", "scale"),
importance = TRUE
)
rfe_results
feature_path <- rfe_results$variables
feature_path
(nrow(feature_path) < n_features)
feature_path[1:n_features, ]
ggplot(feature_path, aes(x = Variables, y = Importance)) +
geom_col(fill = "#E69F00") +
facet_wrap(~Size, ncol = 2) +
labs(title = "Feature Importance Path",
x = "Feature",
y = "Importance") +
theme_minimal()
rlang::last_trace()
rfe_results$resample
str(rfe_results)
run_svm_rfe(
X, y,
n_features = 10,  # 建议设为理论最大值
metric = "ROC",    # 对二分类更敏感
tuneLength = 10    # 高精度参数搜索
)
run_svm_rfe(
X, y,
n_features = 10,  # 建议设为理论最大值
tuneLength = 10    # 高精度参数搜索
)
run_svm_rfe(
X, y,
n_features = 10  # 建议设为理论最大值
)
kernel ="sigmoid"
# 核方法映射表
method_map <- list(
radial = "svmRadial",
linear = "svmLinear",
polynomial = "svmPoly",
sigmoid = "svmSigmoid"
)
# 参数模板（扩展默认值）
kernel_params <- list(
radial = list(gamma = 1/sqrt(ncol(X)), cost = 1),
linear = list(cost = 10),
polynomial = list(degree = 3, scale = TRUE, coef0 = 0, cost = 1),
sigmoid = list(gamma = 1/sqrt(ncol(X)), coef0 = 0, cost = 1)
)
# 参数合并与验证
svm_params <- modifyList(kernel_params[[kernel]], list(...))
# 参数合并与验证
svm_params <- kernel_params[[kernel]]
modifyList
tuneGrid <- switch(kernel,
"radial" = expand.grid(C = svm_params$cost, sigma = svm_params$gamma),
"linear" = expand.grid(C = svm_params$cost),
"polynomial" = expand.grid(C = svm_params$cost, degree = svm_params$degree, scale = svm_params$scale),
"sigmoid" = expand.grid(C = svm_params$cost, sigma = svm_params$gamma, coef0 = svm_params$coef0)
)
ctrl <- rfeControl(
functions = caretFuncs,
method = "cv",
number = 10,
verbose = FALSE,
returnResamp = "all",
# 关键参数：强制遍历所有特征数量
saveDetails = TRUE,
maximize = metric == "Accuracy"
)
# 设置特征筛选控制参数
ctrl <- rfeControl(
functions = caretFuncs,
method = "cv",
number = 10,
verbose = FALSE,
returnResamp = "all",
# 关键参数：强制遍历所有特征数量
saveDetails = TRUE
)
# 定义特征筛选过程
rfe_results <- rfe(
X, y,
sizes = 1:n_features,
rfeControl = ctrl,
method = method_map[[kernel]],
metric = metric,
tuneLength = 5,
tuneGrid = tuneGrid,
preProcess = c("center", "scale"),
importance = TRUE
)
source("G:/athena/scripts/biomarkers.R")
run_svm_rfe(X, y, kernel = "linear")
run_svm_rfe(X, y, kernel = "polynomial")
svm_result <- run_svm_rfe(X, y)
lasso_result$features
rf_result$features
svm_result$features
f = union( union(lasso_result$features, rf_result$features),  svm_result$features  )
f
ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
ensemble_model(X, y,f)
paste
source("G:/athena/scripts/biomarkers.R")
ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
ensemble_model(X, y,f)
f
source("G:/athena/scripts/biomarkers.R")
preprocessed <- preprocess_data(data[data$class %in% class_filter,]);
X <- preprocessed$X
y <- preprocessed$y
X
lasso_result <- run_lasso(X, y)
rf_result <- run_random_forest(X, y)
svm_result <- run_svm_rfe(X, y)
f = union( union(lasso_result$features, rf_result$features), svm_result$features    )
ensemble_result <- ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
ensemble_result <- ensemble_model(X, y,f)
y
selected_features=f
factors = paste("`",paste(selected_features, collapse = "`+`"),"`", sep = "");
factors
formula <- as.formula(paste("class ~ ", factors ));
formula
nomogram_model <- glm(formula, family = "binomial", data = as.data.frame(X))
as.data.frame(X)
source("G:/athena/scripts/biomarkers.R")
ensemble_result <- ensemble_model(X, y,f)
y
x
X
source("G:/athena/scripts/biomarkers.R")
ensemble_result <- ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
ensemble_result <- ensemble_model(X, y,f)
ensemble_result
visualize_results(ensemble_result, X, y)
require(tidyverse)
map
visualize_results(ensemble_result, X, y)
require(purrr)
map
visualize_results(ensemble_result, X, y)
results
results = ensemble_result
results
names(results)
str(results)
results
nomogram_model <- results$nomogram;
auc <- results$auc;
coefficients <- results$coefficients;
library(pROC)
# 获取预测概率
pred_prob <- predict(nomogram_model, type = "response")
# 绘制ROC曲线
roc_obj <- roc(y, pred_prob)
plot(roc_obj, print.auc = TRUE, auc.polygon = TRUE)
# 添加交叉验证的AUC值
text(0.5, 0.3, paste("CV AUC:", round(auc_value, 2)), col = "red");
pred_prob <- predict(nomogram_model, type = "response")
roc_obj <- roc(y, pred_prob)
plot(roc_obj, print.auc = TRUE, auc.polygon = TRUE)
text(0.5, 0.3, paste("CV AUC:", round(auc_value, 2)), col = "red");
text(0.5, 0.3, paste("CV AUC:", round(auc, 2)), col = "red");
library(rms)
ddist <- datadist(as.data.frame(X))
options(datadist = "ddist")
cal <- calibrate(nomogram_model, method = "boot", B = 1000)
nomogram_model <- lrm(formula, data = dX, x = TRUE, y = TRUE)
nomogram_model <- lrm(formula, data =cbind( as.data.frame(X), class = y), x = TRUE, y = TRUE)
cal <- calibrate(nomogram_model, method = "boot", B = 1000)
plot(cal)
library(ggplot2)
coef_df <- data.frame(
Feature = names(coefficients(nomogram_model))[-1],
Importance = abs(coefficients(nomogram_model)[-1])
)
ggplot(coef_df, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_col(fill = "#87CEEB") +
coord_flip() +
labs(title = "Logistic Regression Feature Importance", x = "")
library(fastshap)
shap_values <- explain(nomogram_model, X = X[, selected_features])
X[, selected_features]
library(rms)
# 重构模型为rms格式
lrm_model <- lrm(formula, data = dX, x = TRUE, y = TRUE)
lrm_model <- lrm(formula, data = cbind( as.data.frame(X), class= y), x = TRUE, y = TRUE)
nom <- nomogram(lrm_model, fun = plogis, funlabel = "Risk Probability")
plot(nom)
dX = cbind(as.data.frame(X), class = y)
library(rmda)
dca_data <- decision_curve(formula, data = dX, family = binomial)
formula
dX
dX$class
as.numeric(dX$class)
source("G:/athena/scripts/biomarkers.R")
ensemble_result <- ensemble_model(X, y,f)
source("G:/athena/scripts/biomarkers.R")
setwd("G:/athena")
setwd("F:/datapool/20250523")
visualize_results(ensemble_result, X, y)
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
combined <- c(as.character(lasso_result$features), as.character(rf_result$features), as.character(svm_result$features))
counts <- sort(table(combined), decreasing = TRUE)
counts
top_features <- names(head(counts, 3))
top_features
ensemble_result <- ensemble_model(X, y, top_features)
ensemble_result
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
BiocManager::install("shap")
install.packages("shap")
source("G:/athena/scripts/biomarkers.R")
data2 = cbind(as.data.frame(X), class = y);
data2
features2 = feature_selection(data2, class_col = "class", p_threshold = 0.05);
source("G:/athena/scripts/biomarkers.R")
features2 = feature_selection(data2, class_col = "class", p_threshold = 0.05);
pivot_longer
source("G:/athena/scripts/biomarkers.R")
features2 = feature_selection(data2, class_col = "class", p_threshold = 0.05);
source("G:/athena/scripts/biomarkers.R")
top_features
model2 = train_models(data2, top_features, class_col = "class");
importance <- compute_importance(model2, cleaned_data[-model2$test_idx, ], top_features)
source("G:/athena/scripts/biomarkers.R")
importance <- compute_importance(model2, cleaned_data[-model2$test_idx, ], top_features)
source("G:/athena/scripts/biomarkers.R")
importance <- compute_importance(model2, cleaned_data[-model2$test_idx, ], top_features)
source("G:/athena/scripts/biomarkers.R")
importance <- compute_importance(model2, data2[-model2$test_idx, ], top_features)
data = read.xlsx("F:\\datapool\\20250523\\factors.xlsx", sheetName = "矩阵", row.names = NULL, check.names = FALSE)
class_filter = c("正常妊娠孕妇","复发性流产");
preprocessed <- preprocess_data(data[data$class %in% class_filter,]);
source("G:/athena/scripts/biomarkers.R")
preprocessed <- preprocess_data(data[data$class %in% class_filter,]);
X <- preprocessed$X
y <- preprocessed$y
lasso_result <- run_lasso(X, y)
rf_result <- run_random_forest(X, y)
svm_result <- run_svm_rfe(X, y)
combined <- c(as.character(lasso_result$features), as.character(rf_result$features), as.character(svm_result$features))
counts <- sort(table(combined), decreasing = TRUE)
top_features <- names(head(counts, 3))
top_features
ensemble_result <- ensemble_model(X, y, top_features)
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
set()
set
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
library(fastshap)
shap_values <- explain(nomogram_model, X = X[, selected_features])
nomogram_model <- results$nomogram;
nomogram_model <- ensemble_result$nomogram;
selected_features = top_features
shap_values <- explain(nomogram_model, X = X[, selected_features])
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
X[, selected_features]
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
library(fastshap)
# 若需输出类别预测（0/1）
pred_wrapper_class <- function(model, newdata) {
as.numeric(predict(model, newdata = newdata, type = "response") > 0.5)
}
shap_values <- explain(nomogram_model, X = as.data.frame( X[, selected_features]),
pred_wrapper =pred_wrapper_class,  # 必须指定
nsim = 100  # 蒙特卡洛模拟次数，建议 >= 100
);
shap_values
autoplot(shap_values, type = "importance")
rlang::last_trace()
library(shapviz)
library(shapviz)
shap_viz <- shapviz(shap_values)
shap_values
shap_values <- explain(nomogram_model, X = as.data.frame( X[, selected_features]),
pred_wrapper =pred_wrapper_class,  # 必须指定
nsim = 100,  # 蒙特卡洛模拟次数，建议 >= 100
shap_only = FALSE
);
shap_values
shap_viz <- shapviz(shap_values)
sv_importance(shap_viz, max_display = 10) +  # 全局重要性前10特征
ggtitle("SHAP Feature Importance")
sv_dependence(shap_viz, v = "BMI", color_var = "AGE") +  # 交互式依赖图
geom_smooth(color = "red")  # 添加趋势线
p = sv_importance(shap_viz, max_display = 10) +  # 全局重要性前10特征
ggtitle("SHAP Feature Importance")
p
plot(p)
sv_importance(shap_viz)
sv_waterfall(shap_viz, row_id = 1)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
require(xlsx)
data = read.xlsx("F:\\datapool\\20250523\\factors.xlsx", sheetName = "矩阵", row.names = NULL, check.names = FALSE)
class_filter = c("正常妊娠孕妇","复发性流产");
preprocessed <- preprocess_data(data[data$class %in% class_filter,]);
X <- preprocessed$X
y <- preprocessed$y
lasso_result <- run_lasso(X, y)
rf_result <- run_random_forest(X, y)
svm_result <- run_svm_rfe(X, y)
combined <- c(as.character(lasso_result$features), as.character(rf_result$features), as.character(svm_result$features))
# 统计次数并降序排序
counts <- sort(table(combined), decreasing = TRUE)
# 提取前三个字符串名称
top_features <- names(head(counts, 3))
top_features
ensemble_result <- ensemble_model(X, y, top_features)
setwd("F:/datapool/20250523")
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y,top_features)
source("G:/athena/scripts/biomarkers.R")
visualize_results(ensemble_result, X, y,top_features)
top_features <- names(head(counts, 5))
ensemble_result <- ensemble_model(X, y, top_features)
visualize_results(ensemble_result, X, y,top_features)
install.packages("prospectr")
data(NIRsoil)
require(prospectr)
data(NIRsoil)
force(NIRsoil)
NIRsoil
str(NIRsoil)
NIRsoil$Nt
NIRsoil$Ciso
NIRsoil$CEC
NIRsoil$train
NIRsoil$spc
NIRsoil$spc[1]
NIRsoil$spc[,1]
NIRsoil$spc[1,]
NIRsoil$spc[,1]
plot( NIRsoil$spc[,1])
plot( NIRsoil$spc[1,])
setwd("Z:/")
write.csv(NIRsoil,file "./NIRsoil.csv")
write.csv(NIRsoil,file= "./NIRsoil.csv")
write.csv(NIRsoil,file= "./NIRsoil.csv", row.names = FALSE)
length(NULL)
x = data.frame()
x
x[,"class"] = NULL
x
options(open_proj = 1);
getOption("open_proj")
options(open_proj = NULL);
getOption("open_proj")
